// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  PARTNER
  REVIEWER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  candidatureId String?
  Candidature   Candidature?    @relation(fields: [candidatureId], references: [id])
  ReviewRequest ReviewRequest[]
}

generator client {
  provider = "prisma-client-js"
}

enum CandidatureKind {
  STAGE
  CDI
  ALTERNANCE
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Candidature {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  title           String
  kind            CandidatureKind
  mobile          String?
  info            String?
  firstName       String
  lastName        String
  city            String
  cityInfo        String?
  remote          Boolean
  email           String?
  passions        String?
  experiences     Experience[]
  schools         School[]
  Competences     Competences[]
  User            User[]
  userId          String?
  ReviewRequest   ReviewRequest?   @relation(fields: [reviewRequestId], references: [id])
  reviewRequestId String?
  ExperienceAsso  ExperienceAsso[]
}

model ReviewRequest {
  id            String        @id @default(cuid())
  candidatureId String
  approved      Boolean       @default(false)
  description   String        @default("")
  reviewerId    String?
  reviewer      User?         @relation(fields: [reviewerId], references: [id])
  Candidature   Candidature[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Experience {
  id            String       @id @default(uuid())
  startAt       DateTime?
  endAt         DateTime?
  companyName   String
  missions      String[]
  Candidature   Candidature? @relation(fields: [candidatureId], references: [id])
  candidatureId String?
}

model ExperienceAsso {
  id            String       @id @default(uuid())
  startAt       DateTime?
  endAt         DateTime?
  name          String
  missions      String[]
  Candidature   Candidature? @relation(fields: [candidatureId], references: [id])
  candidatureId String?
}

model School {
  id             String       @id @default(uuid())
  startAt        DateTime?
  endAt          DateTime?
  universityName String
  description    String
  Candidature    Candidature? @relation(fields: [candidatureId], references: [id])
  candidatureId  String?
}

enum CompetenceType {
  FRONTEND
  BACKEND
  DEVOPS
  MOBILE
  DESIGN
  MANAGEMENT
  MARKETING
  COMMUNICATION
  SALES
  BUSINESS
  SOFTSKILLS
  AGILE
  PROJECT_MANAGEMENT
  BUSINESS_INTELLIGENCE
  NETWORK
  OTHER
}

model Competences {
  id            String         @id @default(uuid())
  description   String
  type          CompetenceType
  Candidature   Candidature?   @relation(fields: [candidatureId], references: [id])
  candidatureId String?
}

enum Event {
  VIEW
  LIKED
}

model Events {
  id            String   @id @default(uuid())
  event         Event
  userId        String
  candidatureId String
  createdAt     DateTime @default(now())
}
