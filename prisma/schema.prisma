// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

enum CandidatureKind {
  STAGE
  CDI
  ALTERNANCE
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Candidature {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  title       String
  kind        CandidatureKind
  mobile      String?
  info        String?
  firstName   String
  lastName    String
  city        String
  cityInfo    String?
  remote      Boolean
  email       String?
  experiences Experience[]
  schools     School[]
  Competences Competences[]
}

model Experience {
  id            String       @id @default(uuid())
  startAt       DateTime?
  endAt         DateTime?
  companyName   String
  missions      String[]
  Candidature   Candidature? @relation(fields: [candidatureId], references: [id])
  candidatureId String?
}

model School {
  id             String       @id @default(uuid())
  startAt        DateTime?
  endAt          DateTime?
  universityName String
  description    String
  Candidature    Candidature? @relation(fields: [candidatureId], references: [id])
  candidatureId  String?
}

enum CompetenceType {
  FRONTEND
  BACKEND
  DEVOPS
  MOBILE
  DESIGN
  MANAGEMENT
  MARKETING
  COMMUNICATION
  SALES
  BUSINESS
  SOFTSKILLS
  AGILE
  PROJECT_MANAGEMENT
  BUSINESS_INTELLIGENCE
  NETWORK
  OTHER
}

model Competences {
  id            String         @id @default(uuid())
  description   String
  type          CompetenceType
  Candidature   Candidature?   @relation(fields: [candidatureId], references: [id])
  candidatureId String?
}
